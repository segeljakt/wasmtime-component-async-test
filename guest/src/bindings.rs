// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
    pub mod intf {
        #[used]
        #[doc(hidden)]
        static __FORCE_SECTION_REF: fn() = super::super::__link_custom_section_describing_imports;
        use super::super::_rt;
        #[derive(Debug)]
        #[repr(transparent)]
        pub struct Session {
            handle: _rt::Resource<Session>,
        }
        type _SessionRep<T> = Option<T>;
        impl Session {
            /// Creates a new resource from the specified representation.
            ///
            /// This function will create a new resource handle by moving `val` onto
            /// the heap and then passing that heap pointer to the component model to
            /// create a handle. The owned handle is then returned as `Session`.
            pub fn new<T: GuestSession>(val: T) -> Self {
                Self::type_guard::<T>();
                let val: _SessionRep<T> = Some(val);
                let ptr: *mut _SessionRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
            }
            /// Gets access to the underlying `T` which represents this resource.
            pub fn get<T: GuestSession>(&self) -> &T {
                let ptr = unsafe { &*self.as_ptr::<T>() };
                ptr.as_ref().unwrap()
            }
            /// Gets mutable access to the underlying `T` which represents this
            /// resource.
            pub fn get_mut<T: GuestSession>(&mut self) -> &mut T {
                let ptr = unsafe { &mut *self.as_ptr::<T>() };
                ptr.as_mut().unwrap()
            }
            /// Consumes this resource and returns the underlying `T`.
            pub fn into_inner<T: GuestSession>(self) -> T {
                let ptr = unsafe { &mut *self.as_ptr::<T>() };
                ptr.take().unwrap()
            }
            #[doc(hidden)]
            pub unsafe fn from_handle(handle: u32) -> Self {
                Self {
                    handle: unsafe { _rt::Resource::from_handle(handle) },
                }
            }
            #[doc(hidden)]
            pub fn take_handle(&self) -> u32 {
                _rt::Resource::take_handle(&self.handle)
            }
            #[doc(hidden)]
            pub fn handle(&self) -> u32 {
                _rt::Resource::handle(&self.handle)
            }
            #[doc(hidden)]
            fn type_guard<T: 'static>() {
                use core::any::TypeId;
                static mut LAST_TYPE: Option<TypeId> = None;
                unsafe {
                    assert!(! cfg!(target_feature = "atomics"));
                    let id = TypeId::of::<T>();
                    match LAST_TYPE {
                        Some(ty) => {
                            assert!(
                                ty == id, "cannot use two types with this resource type"
                            )
                        }
                        None => LAST_TYPE = Some(id),
                    }
                }
            }
            #[doc(hidden)]
            pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                Self::type_guard::<T>();
                let _ = unsafe { _rt::Box::from_raw(handle as *mut _SessionRep<T>) };
            }
            fn as_ptr<T: GuestSession>(&self) -> *mut _SessionRep<T> {
                Session::type_guard::<T>();
                T::_resource_rep(self.handle()).cast()
            }
        }
        /// A borrowed version of [`Session`] which represents a borrowed value
        /// with the lifetime `'a`.
        #[derive(Debug)]
        #[repr(transparent)]
        pub struct SessionBorrow<'a> {
            rep: *mut u8,
            _marker: core::marker::PhantomData<&'a Session>,
        }
        impl<'a> SessionBorrow<'a> {
            #[doc(hidden)]
            pub unsafe fn lift(rep: usize) -> Self {
                Self {
                    rep: rep as *mut u8,
                    _marker: core::marker::PhantomData,
                }
            }
            /// Gets access to the underlying `T` in this resource.
            pub fn get<T: GuestSession>(&self) -> &T {
                let ptr = unsafe { &mut *self.as_ptr::<T>() };
                ptr.as_ref().unwrap()
            }
            fn as_ptr<T: 'static>(&self) -> *mut _SessionRep<T> {
                Session::type_guard::<T>();
                self.rep.cast()
            }
        }
        unsafe impl _rt::WasmResource for Session {
            #[inline]
            unsafe fn drop(_handle: u32) {
                #[cfg(not(target_arch = "wasm32"))]
                unreachable!();
                #[cfg(target_arch = "wasm32")]
                {
                    #[link(wasm_import_module = "[export]intf")]
                    unsafe extern "C" {
                        #[link_name = "[resource-drop]session"]
                        fn drop(_: u32);
                    }
                    unsafe { drop(_handle) };
                }
            }
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_open_cabi<T: Guest>() -> i32 {
            #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
            let result0 = T::open();
            (result0).take_handle() as i32
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_infer_cabi<T: Guest>(
            arg0: i32,
            arg1: *mut u8,
            arg2: usize,
        ) -> i32 {
            #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
            let len0 = arg2;
            let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
            let result1 = T::infer(
                unsafe { SessionBorrow::lift(arg0 as u32 as usize) },
                _rt::string_lift(bytes0),
            );
            (result1).take_handle() as i32
        }
        pub trait Guest {
            type Session: GuestSession;
            fn open() -> Session;
            fn infer(
                self_: SessionBorrow<'_>,
                prompt: _rt::String,
            ) -> wit_bindgen_rt::async_support::FutureReader<_rt::String>;
        }
        pub trait GuestSession: 'static {
            #[doc(hidden)]
            unsafe fn _resource_new(val: *mut u8) -> u32
            where
                Self: Sized,
            {
                #[cfg(not(target_arch = "wasm32"))]
                {
                    let _ = val;
                    unreachable!();
                }
                #[cfg(target_arch = "wasm32")]
                {
                    #[link(wasm_import_module = "[export]intf")]
                    unsafe extern "C" {
                        #[link_name = "[resource-new]session"]
                        fn new(_: *mut u8) -> u32;
                    }
                    unsafe { new(val) }
                }
            }
            #[doc(hidden)]
            fn _resource_rep(handle: u32) -> *mut u8
            where
                Self: Sized,
            {
                #[cfg(not(target_arch = "wasm32"))]
                {
                    let _ = handle;
                    unreachable!();
                }
                #[cfg(target_arch = "wasm32")]
                {
                    #[link(wasm_import_module = "[export]intf")]
                    unsafe extern "C" {
                        #[link_name = "[resource-rep]session"]
                        fn rep(_: u32) -> *mut u8;
                    }
                    unsafe { rep(handle) }
                }
            }
        }
        #[doc(hidden)]
        macro_rules! __export_intf_cabi {
            ($ty:ident with_types_in $($path_to_types:tt)*) => {
                const _ : () = { #[unsafe (export_name = "intf#open")] unsafe extern "C"
                fn export_open() -> i32 { unsafe { $($path_to_types)*::
                _export_open_cabi::<$ty > () } } #[unsafe (export_name = "intf#infer")]
                unsafe extern "C" fn export_infer(arg0 : i32, arg1 : * mut u8, arg2 :
                usize,) -> i32 { unsafe { $($path_to_types)*:: _export_infer_cabi::<$ty >
                (arg0, arg1, arg2) } } const _ : () = { #[doc(hidden)] #[unsafe
                (export_name = "intf#[dtor]session")] #[allow(non_snake_case)] unsafe
                extern "C" fn dtor(rep : * mut u8) { unsafe { $($path_to_types)*::
                Session::dtor::< <$ty as $($path_to_types)*:: Guest >::Session > (rep) }
                } }; };
            };
        }
        #[doc(hidden)]
        pub(crate) use __export_intf_cabi;
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    extern crate alloc as alloc_crate;
}
pub mod wit_future {
    #![allow(dead_code, unused_variables, clippy::all)]
    #[doc(hidden)]
    pub trait FuturePayload: Unpin + Sized + 'static {
        const VTABLE: &'static wit_bindgen_rt::async_support::FutureVtable<Self>;
    }
    #[doc(hidden)]
    pub mod vtable0 {
        fn write(
            future: u32,
            value: super::super::_rt::String,
        ) -> ::core::pin::Pin<
            super::super::_rt::Box<dyn ::core::future::Future<Output = bool>>,
        > {
            super::super::_rt::Box::pin(async move {
                #[repr(align(4))]
                struct Buffer([::core::mem::MaybeUninit<u8>; 8]);
                let mut buffer = Buffer([::core::mem::MaybeUninit::uninit(); 8]);
                let address = buffer.0.as_mut_ptr() as *mut u8;
                unsafe {
                    let vec0 = &value;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    *address.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len0;
                    *address.add(0).cast::<*mut u8>() = ptr0.cast_mut();
                }
                match unsafe {
                    wit_bindgen_rt::async_support::await_future_result(
                            start_write,
                            future,
                            address,
                        )
                        .await
                } {
                    wit_bindgen_rt::async_support::AsyncWaitResult::Values(_) => true,
                    wit_bindgen_rt::async_support::AsyncWaitResult::End => false,
                    wit_bindgen_rt::async_support::AsyncWaitResult::Error(_) => {
                        unreachable!("received error while performing write")
                    }
                }
            })
        }
        fn read(
            future: u32,
        ) -> ::core::pin::Pin<
            super::super::_rt::Box<
                dyn ::core::future::Future<
                    Output = ::std::option::Option<
                        ::std::result::Result<
                            super::super::_rt::String,
                            wit_bindgen_rt::async_support::ErrorContext,
                        >,
                    >,
                >,
            >,
        > {
            super::super::_rt::Box::pin(async move {
                struct Buffer([::core::mem::MaybeUninit<u8>; 8]);
                let mut buffer = Buffer([::core::mem::MaybeUninit::uninit(); 8]);
                let address = buffer.0.as_mut_ptr() as *mut u8;
                match unsafe {
                    wit_bindgen_rt::async_support::await_future_result(
                            start_read,
                            future,
                            address,
                        )
                        .await
                } {
                    wit_bindgen_rt::async_support::AsyncWaitResult::Values(v) => {
                        let value = unsafe {
                            let l0 = *address.add(0).cast::<*mut u8>();
                            let l1 = *address
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len2 = l1;
                            let bytes2 = super::super::_rt::Vec::from_raw_parts(
                                l0.cast(),
                                len2,
                                len2,
                            );
                            super::super::_rt::string_lift(bytes2)
                        };
                        Some(Ok(value))
                    }
                    wit_bindgen_rt::async_support::AsyncWaitResult::Error(e) => {
                        Some(
                            Err(
                                wit_bindgen_rt::async_support::ErrorContext::from_handle(e),
                            ),
                        )
                    }
                    wit_bindgen_rt::async_support::AsyncWaitResult::End => None,
                }
            })
        }
        #[cfg(not(target_arch = "wasm32"))]
        unsafe extern "C" fn cancel_write(_: u32) -> u32 {
            unreachable!()
        }
        #[cfg(not(target_arch = "wasm32"))]
        unsafe extern "C" fn cancel_read(_: u32) -> u32 {
            unreachable!()
        }
        #[cfg(not(target_arch = "wasm32"))]
        unsafe extern "C" fn close_writable(_: u32, _: u32) {
            unreachable!()
        }
        #[cfg(not(target_arch = "wasm32"))]
        unsafe extern "C" fn close_readable(_: u32, _: u32) {
            unreachable!()
        }
        #[cfg(not(target_arch = "wasm32"))]
        unsafe extern "C" fn new() -> u32 {
            unreachable!()
        }
        #[cfg(not(target_arch = "wasm32"))]
        unsafe extern "C" fn start_read(_: u32, _: *mut u8) -> u32 {
            unreachable!()
        }
        #[cfg(not(target_arch = "wasm32"))]
        unsafe extern "C" fn start_write(_: u32, _: *mut u8) -> u32 {
            unreachable!()
        }
        #[cfg(target_arch = "wasm32")]
        #[link(wasm_import_module = "[export]intf")]
        unsafe extern "C" {
            #[link_name = "[future-new-0]infer"]
            fn new() -> u32;
            #[link_name = "[future-cancel-write-0]infer"]
            fn cancel_write(_: u32) -> u32;
            #[link_name = "[future-cancel-read-0]infer"]
            fn cancel_read(_: u32) -> u32;
            #[link_name = "[future-close-writable-0]infer"]
            fn close_writable(_: u32, _: u32);
            #[link_name = "[future-close-readable-0]infer"]
            fn close_readable(_: u32, _: u32);
            #[link_name = "[async-lower][future-read-0]infer"]
            fn start_read(_: u32, _: *mut u8) -> u32;
            #[link_name = "[async-lower][future-write-0]infer"]
            fn start_write(_: u32, _: *mut u8) -> u32;
        }
        pub static VTABLE: wit_bindgen_rt::async_support::FutureVtable<
            super::super::_rt::String,
        > = wit_bindgen_rt::async_support::FutureVtable::<super::super::_rt::String> {
            write,
            read,
            cancel_write,
            cancel_read,
            close_writable,
            close_readable,
            new,
        };
        impl super::FuturePayload for super::super::_rt::String {
            const VTABLE: &'static wit_bindgen_rt::async_support::FutureVtable<Self> = &VTABLE;
        }
    }
    /// Creates a new Component Model `future` with the specified payload type.
    pub fn new<T: FuturePayload>() -> (
        wit_bindgen_rt::async_support::FutureWriter<T>,
        wit_bindgen_rt::async_support::FutureReader<T>,
    ) {
        unsafe { wit_bindgen_rt::async_support::future_new::<T>(T::VTABLE) }
    }
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_guest_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: exports::intf::__export_intf_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::intf);
    };
}
#[doc(inline)]
pub(crate) use __export_guest_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:pkg:component:guest:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 230] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07k\x01A\x02\x01A\x02\x01\
B\x08\x04\0\x07session\x03\x01\x01i\0\x01@\0\0\x01\x04\0\x04open\x01\x02\x01h\0\x01\
e\x01s\x01@\x02\x04self\x03\x06prompts\0\x04\x04\0\x05infer\x01\x05\x04\0\x04int\
f\x05\0\x04\0\x13pkg:component/guest\x04\0\x0b\x0b\x01\0\x05guest\x03\0\0\0G\x09\
producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rus\
t\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
